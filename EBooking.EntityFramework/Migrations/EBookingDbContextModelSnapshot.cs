// <auto-generated />
using System;
using EBooking.EntityFramework.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EBooking.EntityFramework.Migrations
{
    [DbContext(typeof(EBookingDbContext))]
    partial class EBookingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("EBooking.EntityFramework.Entities.AccommodationEntity", b =>
                {
                    b.Property<int>("AccommodationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AccommodationId");

                    b.HasIndex("AccommodationId");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("Accommodation");
                });

            modelBuilder.Entity("EBooking.EntityFramework.Entities.AccommodationUnitEntity", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccommodationId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AvailableFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AvailableTo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfBeds")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("UnitSize")
                        .HasColumnType("TEXT");

                    b.HasKey("UnitId");

                    b.HasIndex("AccommodationId");

                    b.HasIndex("UnitId");

                    b.ToTable("AccommodationUnit");
                });

            modelBuilder.Entity("EBooking.EntityFramework.Entities.AccommodationUnitReservationEntity", b =>
                {
                    b.Property<int>("UnitReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfAdults")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfChildren")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OnName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReservationFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReservationTo")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("TEXT");

                    b.Property<int>("UnitId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UnitReservationId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UnitId");

                    b.HasIndex("UnitReservationId");

                    b.ToTable("AccommodationUnitReservation");
                });

            modelBuilder.Entity("EBooking.EntityFramework.Entities.FeatureOnUnitEntity", b =>
                {
                    b.Property<int>("FeatureId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("UnitId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.HasKey("FeatureId", "UnitId");

                    b.HasIndex("UnitId");

                    b.ToTable("FeatureOnUnit");
                });

            modelBuilder.Entity("EBooking.EntityFramework.Entities.FlightEntity", b =>
                {
                    b.Property<int>("FlightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("AvioCompanyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("FlightCapacity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FlightClass")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FromLocationId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("TEXT");

                    b.Property<int>("ToLocationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FlightId");

                    b.HasIndex("FlightId");

                    b.HasIndex("FromLocationId");

                    b.HasIndex("ToLocationId");

                    b.HasIndex("UserId");

                    b.ToTable("Flight");
                });

            modelBuilder.Entity("EBooking.EntityFramework.Entities.FlightOnTripReservationEntity", b =>
                {
                    b.Property<int>("TripId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("FlightId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.HasKey("TripId", "FlightId");

                    b.HasIndex("FlightId");

                    b.ToTable("FlightOnTripReservation");
                });

            modelBuilder.Entity("EBooking.EntityFramework.Entities.LocationEntity", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("EBooking.EntityFramework.Entities.TripReservationEntity", b =>
                {
                    b.Property<int>("TripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OnName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("TripId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TripId");

                    b.ToTable("TripReservation");
                });

            modelBuilder.Entity("EBooking.EntityFramework.Entities.UnitFeatureEntity", b =>
                {
                    b.Property<int>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("UnitFeature");
                });

            modelBuilder.Entity("EBooking.EntityFramework.Entities.UserEntity", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("User");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("EBooking.EntityFramework.Entities.AdministratorEntity", b =>
                {
                    b.HasBaseType("EBooking.EntityFramework.Entities.UserEntity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Administrator");
                });

            modelBuilder.Entity("EBooking.EntityFramework.Entities.EmployeeEntity", b =>
                {
                    b.HasBaseType("EBooking.EntityFramework.Entities.UserEntity");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("EBooking.EntityFramework.Entities.AccommodationEntity", b =>
                {
                    b.HasOne("EBooking.EntityFramework.Entities.LocationEntity", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EBooking.EntityFramework.Entities.AdministratorEntity", "Administrator")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Administrator");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("EBooking.EntityFramework.Entities.AccommodationUnitEntity", b =>
                {
                    b.HasOne("EBooking.EntityFramework.Entities.AccommodationEntity", "Accommodation")
                        .WithMany("AccommodationUnits")
                        .HasForeignKey("AccommodationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accommodation");
                });

            modelBuilder.Entity("EBooking.EntityFramework.Entities.AccommodationUnitReservationEntity", b =>
                {
                    b.HasOne("EBooking.EntityFramework.Entities.EmployeeEntity", "Employee")
                        .WithMany("UnitReservations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EBooking.EntityFramework.Entities.AccommodationUnitEntity", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("EBooking.EntityFramework.Entities.FeatureOnUnitEntity", b =>
                {
                    b.HasOne("EBooking.EntityFramework.Entities.UnitFeatureEntity", "UnitFeature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EBooking.EntityFramework.Entities.AccommodationUnitEntity", "AccommodationUnit")
                        .WithMany("Features")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccommodationUnit");

                    b.Navigation("UnitFeature");
                });

            modelBuilder.Entity("EBooking.EntityFramework.Entities.FlightEntity", b =>
                {
                    b.HasOne("EBooking.EntityFramework.Entities.LocationEntity", "FromLocation")
                        .WithMany()
                        .HasForeignKey("FromLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EBooking.EntityFramework.Entities.LocationEntity", "ToLocation")
                        .WithMany()
                        .HasForeignKey("ToLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EBooking.EntityFramework.Entities.AdministratorEntity", "Administrator")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Administrator");

                    b.Navigation("FromLocation");

                    b.Navigation("ToLocation");
                });

            modelBuilder.Entity("EBooking.EntityFramework.Entities.FlightOnTripReservationEntity", b =>
                {
                    b.HasOne("EBooking.EntityFramework.Entities.FlightEntity", "Flight")
                        .WithMany()
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EBooking.EntityFramework.Entities.TripReservationEntity", "TripReservation")
                        .WithMany("Flights")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");

                    b.Navigation("TripReservation");
                });

            modelBuilder.Entity("EBooking.EntityFramework.Entities.TripReservationEntity", b =>
                {
                    b.HasOne("EBooking.EntityFramework.Entities.EmployeeEntity", "Employee")
                        .WithMany("TripReservations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EBooking.EntityFramework.Entities.AdministratorEntity", b =>
                {
                    b.HasOne("EBooking.EntityFramework.Entities.UserEntity", null)
                        .WithOne()
                        .HasForeignKey("EBooking.EntityFramework.Entities.AdministratorEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EBooking.EntityFramework.Entities.EmployeeEntity", b =>
                {
                    b.HasOne("EBooking.EntityFramework.Entities.UserEntity", null)
                        .WithOne()
                        .HasForeignKey("EBooking.EntityFramework.Entities.EmployeeEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EBooking.EntityFramework.Entities.AccommodationEntity", b =>
                {
                    b.Navigation("AccommodationUnits");
                });

            modelBuilder.Entity("EBooking.EntityFramework.Entities.AccommodationUnitEntity", b =>
                {
                    b.Navigation("Features");
                });

            modelBuilder.Entity("EBooking.EntityFramework.Entities.TripReservationEntity", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("EBooking.EntityFramework.Entities.EmployeeEntity", b =>
                {
                    b.Navigation("TripReservations");

                    b.Navigation("UnitReservations");
                });
#pragma warning restore 612, 618
        }
    }
}
